name: proto
version: 1.0.0
icon: https://devpod.sh/assets/kubernetes.svg
home: https://github.com/granito-source/devpod-provider-proto
description: >-
  Prototype of DevPod on Kubernetes, script based.
optionGroups:
  - name: "Options"
    defaultVisible: true
    options:
      - KUBERNETES_NAMESPACE
      - DISK_SIZE
  - name: "Kubernetes Config"
    options:
      - KUBERNETES_CONFIG
      - KUBERNETES_CONTEXT
  - name: "Advanced Options"
    options:
      - KUBECTL_PATH
      - INACTIVITY_TIMEOUT
      - STORAGE_CLASS
      - PVC_ACCESS_MODE
      - HELPER_IMAGE
      - DOCKERLESS_DISABLED
      - DOCKERLESS_IMAGE
options:
  KUBERNETES_NAMESPACE:
    description: The Kubernetes namespace to use.
    command: |-
      NAMESPACE=$(${KUBECTL_PATH} config view --kubeconfig=${KUBERNETES_CONFIG} --context=${KUBERNETES_CONTEXT} --minify -o jsonpath='{..namespace}' 2>/dev/null || true)
      if [ -z "${NAMESPACE}" ]; then
        NAMESPACE=devpod
      fi
      echo $NAMESPACE
  DISK_SIZE:
    description: The default size for the persistent volume to use.
    default: 10Gi
    global: true
  KUBERNETES_CONFIG:
    description: >-
      The kubernetes config to use. E.g. /path/to/my/kube/config.yaml
  KUBERNETES_CONTEXT:
    description: The kubernetes context to use. E.g. my-kube-context.
  KUBECTL_PATH:
    description: The path where to find the kubectl binary.
    default: kubectl
    global: true
  INACTIVITY_TIMEOUT:
    description: >-
      If defined, will automatically stop the pod after the inactivity
      period. Examples: 10m, 1h.
  STORAGE_CLASS:
    description: >-
      If defined, DevPod will use the given storage class to create
      the persistent volume claim. You will need to ensure the storage
      class exists in your cluster!
    global: true
  PVC_ACCESS_MODE:
    description: >-
      If defined, DevPod will use the given access mode to create
      the persistent volume claim. You will need to ensure the storage
      class support the given access mode!
    global: true
  HELPER_IMAGE:
    description: >-
      The image DevPod will use to find out the cluster architecture.
      Defaults to alpine.
    global: true
  DOCKERLESS_DISABLED:
    description: >-
      If dockerless should be disabled. Dockerless is the way DevPod
      uses to build images directly within Kubernetes. If dockerless
      is disabled and no image is specified, DevPod will fail instead.
    default: "false"
    global: true
  DOCKERLESS_IMAGE:
    description: The dockerless image to use.
    global: true
agent:
  containerInactivityTimeout: ${INACTIVITY_TIMEOUT}
  local: true
  dockerless:
    disabled: ${DOCKERLESS_DISABLED}
    image: ${DOCKERLESS_IMAGE}
  binaries:
    K8S_PROVIDER:
      - os: linux
        arch: amd64
        path: @prefix@/provider.sh
        checksum: @hash@
      - os: linux
        arch: arm64
        path: @prefix@/provider.sh
        checksum: @hash@
      - os: darwin
        arch: amd64
        path: @prefix@/provider.sh
        checksum: @hash@
      - os: darwin
        arch: arm64
        path: @prefix@/provider.sh
        checksum: @hash@
      - os: windows
        arch: amd64
        path: @prefix@/provider.sh
        checksum: @hash@
  driver: custom
  custom:
    findDevContainer: '"${K8S_PROVIDER}" find'
    commandDevContainer: '"${K8S_PROVIDER}" command'
    startDevContainer: '"${K8S_PROVIDER}" start'
    stopDevContainer: '"${K8S_PROVIDER}" stop'
    runDevContainer: '"${K8S_PROVIDER}" run'
    deleteDevContainer: '"${K8S_PROVIDER}" delete'
    targetArchitecture: '"${K8S_PROVIDER}" target-architecture'
    canReprovision: true
exec:
  command: |-
    "${DEVPOD}" helper sh -c "${COMMAND}"
